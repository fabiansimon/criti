generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Membership {
  FREE
  PREMIUM_V1
}

model Track {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  title    String
  fileId   String  @unique
  password String?

  file     File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  comments Comment[]

  trustedSessions TrustedSession[]
  isArchived      Boolean          @default(false)
}

model TrustedSession {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())

  sessionId String

  trackId String
  Track   Track  @relation(fields: [trackId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  timestamp Int?
  trackId   String
  open      Boolean  @default(true)
  byAdmin   Boolean  @default(false)
  creatorId String?
  sessionId String?

  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mime      String
  url       String
  byteSize  Int

  track      Track?  @relation
  isArchived Boolean @default(false)
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  membership Membership @default(FREE)
  accounts   Account[]
  sessions   Session[]
  tracks     Track[]

  stripeCustomerId        String?
  stripeSubscriptionId    String?
  stripSubscriptionStatus StripeSubscriptionStatus?
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
